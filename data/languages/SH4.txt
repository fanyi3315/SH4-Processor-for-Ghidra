
Creating a project:

1) File-New Project
 2) Ghidra Module Project
 



=-=-=-=-=-=-=-=-
=- Emulating: =-
=-=-=-=-=-=-=-=-

  http://oss.renesas.com/Documentations/Getting_Started_with_SH4_and_QEMU.pdf
  
 nico@Cyxtera:~/Research/qemu/sh4-softmmu$ ./qemu-system-sh4 -M r2d -serial stdio -m 1024M -kernel ../sh-test-0.2/zImage -usb -usbdevice keyboard -hda ../sh-test-0.2/sh-linux-mini.img 

or 
 nico@Cyxtera:~/Research/qemu/Images/system-image-sh4$ ./dev-environment.sh 

=-=-=-=-=-=-=-=-=-=-=-=-
=- Compiling Sleigh:  =-
=-=-=-=-=-=-=-=-=-=-=-=-
nico@Cyxtera:~/immunity/Tools/ghidra_9.0/Ghidra/Processors/SH4/data/languages$ ../../../../../support/sleigh SH4.slaspec SH4.sla


=-=-=-=-=-=-=-=-
=- Debugging  =-           
=-=-=-=-=-=-=-=-

In Ghidra open the script manager ("Window" -> "Script Manager") and add key-bindings for DebugSleighInstructionParse.java and ReloadSleighLangauge.java.

In Ghidra enable PCode display by clicking the "Edit the Listing fields" icon at the top of the Listing view, right clicking "PCode" and clicking "Enable Field" (you may wish to toggle this on-and-off during reversing as it is quite verbose).


=-=-=-=-=-=-=-
=- Branch:  =-
=-=-=-=-=-=-=-

 = Delay Branch =
 ================
 "Except for the two branch instructions BF and BT, the SH-4’s branch instructions
and RTE are delayed branches."

  T bit
The T bit in the status register (SR) is used to show the result of a compare
operation, and is referenced by a conditional branch instruction. An example of the
use of a conditional branch instruction is shown below.

In an RTE delay slot, status register (SR) bits are referenced as follows. In
instruction access, the MD bit is used before modification, and in data access, the
MD bit is accessed after modification. The other bits S, T, M, Q, FD, BL, and RB
after modification are used for delay slot instruction execution. The STC and STC.L
SR instructions access all SR bits after modification.

Constant:
  8, 16 & 32 bit


Addressing modes:
   Register direct:                    	Rn
   Register indirect:         			@Rn  			[Rn]
   Register indirect w/post inc  		@Rn+  			[Rn+Const]  (1, 2, 4, 8 )
 -  Register indirect w/pre  dec  		@-Rn  			[Rn-Const]
     / Effective address is register Rn contents, decremented by a constant beforehand,
     1 for a byte operand, 2 for a word operand, 4 for a longword operand, 8 for a quadword operand. 

   Register indirect w/displacement		@(disp:4, Rn)  	[Rn+disp* (2/4) ]
   Indexed register indirect			@(R0, Rn)       [R0+Rn]
   GBR indirect w/ displacement         @(disp:8, GBR)  [GBR+disp*(2/4)]
   Indexed GBR indirect					@(R0, GBR) 		[R0 + GBR]
   PC relativ w/ displacement			@(disp:8, PC)	Offset * (2/4)  // offset:8bit
   PC-relative							@(disp:8)		Offset
   PC-relative							@(disp:12)		Offset * (2/4)  // offset:12 bit
   Immediate							imm:8			Immediate // 8 bit


switch( instruction & 0xF )
   


Symbols:
--------
instruction ->	The root instruction table.
const  ->		Special address space for building constant varnodes.
unique ->		Address space for allocating temporary registers.
inst_start ->	Offset of the address of the current instruction.
inst_next ->	Offset of the address of the next instruction.
epsilon	 ->		A special identifier indicating an empty bit pattern.


Extension:
----------
zext (unsigned)
sext (signed)

Most processors have instructions that extend small values into big values, and many instructions do these minor data manipulations implicitly. In keeping with the p-code philosophy, these operations must be specified explicitly with the INT_ZEXT and INT_SEXT operators in the semantic section. The INT_ZEXT, does a so-called zero extension. The low-order bits are copied from the input, and any remaining high-order bits in the result are set to zero. The INT_SEXT, does a signed extension. The low-order bits are copied from the input, but any remaining high-order bits in the result are set to the value of the high-order bit of the input. The INT_ZEXT operation is invoked with the zext operator, and the INT_SEXT operation is invoked with the sext operator.

Truncation
----------
Truncation
There are two forms of syntax indicating a truncation of the input varnode. In one the varnode is followed by a colon ‘:’ and an integer indicating the number of bytes to copy into the output, starting with the least significant byte. In the second form, the varnode is followed by an integer, surrounded by parentheses, indicating the number of least significant bytes to truncate from the input. This second form doesn’t directly specify the size of the output, which must be inferred from context.

:split r1,lo,hi is opcode=0x81 & r1 & lo & hi {
    lo = r1:4;
    hi = r1(4);
}

BitRange
--------
  R2 [ bit start, size ]


A specific subrange of bits within a varnode can be explicitly referenced. Depending on the range, this may amount to just a variation on the truncation syntax described earlier. But for this operator, the size and boundaries of the range do not have to be restricted to byte alignment.

:bit3 r1,r2 is op=0x7e & r1 & r2 { r1 = zext(r2[3,1]); }
A varnode, r2 in this example, is immediately followed by square brackets ‘[’ and ‘]’ indicating a bit range, and within the brackets, there are two parameters separated by a comma. The first parameter is an integer indicating the least significant bit of the resulting bit range. The bits of the varnode are labeled in order of significance, with the least significant bit of the varnode being 0. The second parameter is an integer indicating the number of bits in the range. In the example, a single bit is extracted from r2, and its value is extended to fill r1. Thus r1 takes either the value 0 or 1, depending on bit 3 of r2.

There are some caveats associated with using this operator. Bit range extraction is really a pseudo operator, as real p-code can only work with memory down to byte resolution. The bit range operator will generate some combination of INT_RIGHT, INT_AND, and SUBPIECE to simulate the extraction of smaller or unaligned pieces. The “r2[3,1]” from the example generates the following p-code, for instance.

u1 = INT_RIGHT r2,#3
u2 = SUBPIECE u1,0
u3 = INT_AND u2,#0x1
The result of any bit range operator still has a size in bytes. This size is always the minimum number of bytes needed to contain the resulting bit range, and if there are any extra bits in the result these are automatically set to zero.

VarNode Size
------------
All statements within the semantic section must be specified up to the point where the sizes of all varnodes are unambiguously determined. Most specific symbols, like registers, must have their size defined by definition, but there are two sources of size ambiguity.

- Constants
- Temporary Variables

The SLEIGH compiler can usually fill in the required size by examining these situations in the context of the entire semantic section. Most p-code operations have size restrictions on their inputs and outputs, which when put together can uniquely determine the unspecified sizes. Referring to Table 5, “Semantic Expression Operators and Syntax” in the Appendix, all arithmetic and logical operations, both integer and floating point, must have inputs and outputs all of the same size. The only exceptions are as follows. The overflow operators, INT_CARRY, INT_SCARRY, INT_SBORROW, and FLOAT_NAN have a boolean output. The shift operators, INT_LEFT, INT_RIGHT, and INT_SRIGHT, currently place no restrictions on the shift amount operand. All the comparison operators, both integer and floating point, insist that their inputs are all the same size, and the output must be a boolean variable, with a size of 1 byte.

The operators without a size constraint are the load and store operators, the extension and truncation operators, and the conversion operators. As discussed in Section 7.7.1.2, “The '*' Operator”, the ‘*’ operator cannot get size information for the dynamic (pointed-to) object from the pointer itself. The other operators by definition involve a change of size from input to output.

If the SLEIGH compiler cannot discover the sizes of constants and temporaries, it will report an error stating that it could not resolve variable sizes for that constructor. This can usually be fixed rapidly by appending the size ‘:’ modifier to either the ‘*’ operator, the temporary variable definition, or to an explicit integer. Here are three examples of statements that generate a size resolution error, each followed by a variation which corrects the error.

:sta [r1],imm is opcode=0x3a & r1 & imm {
    *r1 = imm;                                      #Error
}
:sta [r1],imm is opcode=0x3a & r1 & imm {
    *:4 r1 = imm;                                   #Correct
}
:inc [r1]     is opcode=0x3b & r1       {
    tmp = *r1 + 1; *r1 = tmp;                       # Error
}
:inc [r1]     is opcode=0x3b & r1       {
    tmp:4 = *r1 + 1; *r1 = tmp;                     # Correct
}
:clr [r1]     is opcode=0x3c & r1       {
    * r1 = 0;                                       # Error
}
:clr [r1]     is opcode=0x3c & r1       {
    * r1 = 0:4;                                     # Correct
}


Examples of Loading/Storing bytes of different size.

L = Double word: 4 bytes
:MOV.L	  Rm2, @(disp4, Rn)  is quad0=1 & disp4 & Rm2 & Rn { 
	tmpaddr:4 = zext(disp4:1 *2) + Rn;
	*tmpaddr = Rm2;
}

:MOV.B    R0, @(disp4, Rn2)  is quad0=8 & quad1=0 & disp4 & Rn2 & R0 {
	tmpaddr:4 = Rn2 +  zext(disp4:1);
	*[ram]:1 tmpaddr = R0:1; 
 }






=-=-=-=-=-=-=-
=- Errors:  =-
=-=-=-=-=-=-=-


======================================
** SH4_main.sinc:59: Attach varnode Rn1 is wrong size for list [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15]


define token RegN(16)

 	Rn1  = (8,  12)    
 	Rm2  =  (4, 7)    
define register offset=0 size=4 [R0  R1  R2  R3  R4  R5  R6  R7 
                                 R8  R9  R10 R11 R12 R13 R14 R15 ];

attach variables [Rn1 Rn2 Rm1 Rm2] [R0  R1  R2  R3  R4  R5  R6  R7 
                                 R8  R9  R10 R11 R12 R13 R14 R15 ];

Fix: The error in this case is occasionated by Rn1 being bigger than 4 bits (In this case, 5 bits)



=======================================
SH4_main.sinc:89: imm8 (used in varnode reference) is not declared in the pattern list
Unrecoverable error(s), halting compilation

Line 89
# Fixed Point Transfer Instructions 
:MOV      IMM8, RN			is quad0=0xE & IMM8 { Rn = imm8; }


define token SH4Instructions(16)
    [...]
 	imm8  =  ( 0,  7)  # 8b

IMM8: imm8 is imm8 			{ export imm8; }


========================================================
Error: operand SZ is undefined: for table "instruction" constructor from SH4_main.sinc:93

:MOV.^SZ  Rm2, @-Rn          is quad0=2 & mode=1  & Rm2 & Rn { }

SZ: "B" is msize=0 { }
SZ: "W" is msize=1 { }
SZ: "L" is msize=2 { }

FIX: TURN OUT, I NEED TO INCLUDE "SZ" on the instruction:

:MOV.^SZ  Rm2, @-Rn          is quad0=2 & mode=1  & Rm2 & Rn & SZ { }
                                                               ^^

=========================================================

SH4_main.sinc:85: varnodelist_symbol Rn (defined at SH4_main.sinc:56) is wrong type (should be start, end, operand, epsilon, or varnode) in assignment

(56) attach variables [ Rn Rm1 Rm2 ] [R0  R1  R2  R3  R4  R5  R6  R7 
                                 R8  R9  R10 R11 R12 R13 R14 R15 ];


(l85) RN: Rn is Rn				{ export Rn;   }

:MOV      imm8, RN			is quad0=0xE & imm8 & RN { Rn = imm8; }


FIX: Problem here I'm assinging Rn = Imm8, where it should be "RN"


=========================================================
SH4_main.sinc:95: unknown start, end, operand, epsilon, or varnode C in pattern expression
Unrecoverable error(s), halting compilation

(95) :MOV.^SZ2 R0, @(disp4, GBR)  is quad0=C & mode1=0 & SZ2 & R0 & disp4 & GBR { }

define register offset=0x2000 size=4 [ SR  GBR SSR SPC SGR DBR VBR ];


SZ2: "B" is msize2 = 0 & msize2 { }
SZ2: "W" is msize2 = 1 & msize2 { }
SZ2: "L" is msize2 = 2 & msize2 { }

FIX: quad0=C should be quad0=0xC

=========================================================
sleighCompile:
     [java] Compiling ./languages/sh4.slaspec:
     [java] 
     [java] Unrecoverable error(s), halting compilation
     [java] java.lang.NullPointerException
     [java] 	at ghidra.sleigh.grammar.AbstractSleighParser.getErrorHeader(AbstractSleighParser.java:45)
     [java] 	at org.antlr.runtime.BaseRecognizer.displayRecognitionError(BaseRecognizer.java:192)
     [java] 	at org.antlr.runtime.BaseRecognizer.reportError(BaseRecognizer.java:186)
     [java] 	at ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_func(SleighParser_SemanticParser.java:11087)
     [java] 	at ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_unary(SleighParser_SemanticParser.java:9968)
     [java] 	at ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_mult(SleighParser_SemanticParser.java:9540)
     [java] 	at ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_add(SleighParser_SemanticParser.java:9248)
     [java] 	at ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_shift(SleighParser_SemanticParser.java:8995)
     [java] 	at ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_comp(SleighParser_SemanticParser.java:8391)
     [java] 	at ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_eq(SleighParser_SemanticParser.java:8099)
     [java] 	at ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_and(SleighParser_SemanticParser.java:7964)
     [java] 	at ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_xor(SleighParser_SemanticParser.java:7781)
     [java] 	at ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_or(SleighParser_SemanticParser.java:7622)
     [java] 	at ghidra.sleigh.grammar.SleighParser_SemanticParser.expr_booland(SleighParser_SemanticParser.java:7410)

:AND      Rm2, Rn 			 is quad0=2 & quad3=0x9 & Rm2 & Rn {
	Rn = Rm2 & Rn
}


FIX: Add a semicolon at the end!
	Rn = Rm2 & Rn;                 ^
=========================================================

     [java] Error: operand imm8 is undefined: for table "instruction" constructor from sh4.sinc:205

(205) :AND      "#"^imm8, R0 			 is quad0=0xC & quad1=0x9 & R0  {

FIX: Again, forgot to define imm8
:AND      "#"^imm8, R0 			 is quad0=0xC & quad1=0x9 & R0 & imm8 {
   
                                                              ^^^^^
=========================================================
     [java] sh4.sinc:205: in table "instruction" constructor from sh4.sinc:205
     [java]    Main section: Could not resolve at least 1 variable size

:AND      "#"^imm8, R0 			 is quad0=0xC & quad1=0x9 & R0 & imm8 {
	R0 = R0 & zext(imm8);

FIX: We need to define the size of imm8 while passed to zext
:AND      "#"^imm8, R0 			 is quad0=0xC & quad1=0x9 & R0 & imm8 {
	R0 = R0 & zext(imm8:2);
	               ^^^^^^

=========================================================
Error:
sleighCompile:
     [java] Compiling ./languages/sh4.slaspec:
     [java] 
     [java] 0 languages successfully compiled
     [java] /home/nico/immunity/Tools/ghidra_9.0/Ghidra/Processors/SH4/data/./languages/sh4.slaspec failed to compile
     [java] 1 languages total failed to compile
     [java] 24 NOP constructors found
     [java] Use -n switch to list each individually
     [java] Size restriction error in table "instruction" in constructor at sh4.sinc:215 from operation located at sh4.sinc:217
     [java]   Problem in "Load(*)" operator
     [java]   Pointer size must match size of space
     [java] Size restriction error in table "instruction" in constructor at sh4.sinc:215 from operation located at sh4.sinc:218
     [java]   Problem in "Store(*)" operator
     [java]   Pointer size must match size of space
     [java] No output produced

I was having problems with my registers/ram with size=2:

define space ram     type=ram_space      size=2  default;
define space register type=register_space size=2;

The problem here that the size is used to define the number of bytes need to address any bytes within this the space. The solution was to move it as 4.

define space ram     type=ram_space      size=4  default;
define space register type=register_space size=4;













Otros ejemplos:

:cmp^COND rn,shift1 		is $(AMODE) &  COND & c2024=21 & rn & c1215=0 & c2627=0 & shift1
{
  build COND;
  build rn;
  build shift1;
  subflags(rn,shift1);
  local tmp = rn - shift1;
  resultflags(tmp);
  affectflags();
}

COND: cc is $(AMODE) &  cc		      { if (!cc) goto inst_next; }   # Execute conditionally

cc: "eq" is cond=0          { export ZR; }
cc: "ne" is cond=1          { tmp:1 = !ZR; export tmp; }
cc: "cs" is cond=2          { export CY; }
cc: "cc" is cond=3          { tmp:1 = !CY; export tmp; }
cc: "mi" is cond=4          { export NG; }
cc: "pl" is cond=5          { tmp:1 = !NG; export tmp; }
cc: "vs" is cond=6          { export OV; }
cc: "vc" is cond=7          { tmp:1 = !OV; export tmp; }
cc: "hi" is cond=8          { tmp:1 = CY && (!ZR); export tmp; }
cc: "ls" is cond=9          { tmp:1 = (!CY) || ZR; export tmp; }
cc: "ge" is cond=10         { tmp:1 = (NG==OV); export tmp; }
cc: "lt" is cond=11         { tmp:1 = (NG!=OV); export tmp; }
cc: "gt" is cond=12         { tmp:1 = (!ZR) && (NG==OV); export tmp; }
cc: "le" is cond=13         { tmp:1 = ZR || (NG!=OV); export tmp; }

COND: cc is $(AMODE) &  cc		      { if (!cc) goto inst_next; }   # Execute conditionally
COND:    is $(AMODE) &  cond=14	  { }			     # Always execute